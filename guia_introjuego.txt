# üé® Gu√≠a de Implementaci√≥n: Sistema de Colores para PlayCanvas

## üìã Resumen del Sistema

Hemos creado un sistema completo de selecci√≥n de colores que incluye:
- **Interfaz web elegante** para seleccionar colores antes del juego
- **Panel flotante** durante el juego para cambios din√°micos
- **Scripts de PlayCanvas** para gestionar los colores
- **Sincronizaci√≥n autom√°tica** entre interfaz y juego
- **Persistencia** de colores seleccionados

---

## üöÄ Paso 1: Configurar los Scripts en PlayCanvas

### 1.1 Actualizar movimiento.js

Reemplaza tu archivo `movimiento.js` actual con el c√≥digo del artifact **"Integraci√≥n de Colores con PlayCanvas"**. Los cambios principales incluyen:

```javascript
// ‚úÖ Nuevas caracter√≠sticas a√±adidas:
- Sistema de colores predefinidos
- Carga autom√°tica desde localStorage
- Cambio de colores con teclas 1-9, 0, C
- Preservaci√≥n del color durante colisiones
- API p√∫blica para cambios externos
```

### 1.2 Crear ColorManager.js (Opcional pero Recomendado)

1. En PlayCanvas, ve a **Assets** ‚Üí **Create** ‚Üí **Script**
2. Nombra el script `ColorManager`
3. Copia el c√≥digo del artifact **"ColorManager.js"**
4. Guarda el script

### 1.3 Configurar las Entidades

1. **Selecciona tu Box (jugador)**:
   - Aseg√∫rate de que tenga el script `movimiento` asignado
   
2. **Crear entidad ColorManager (si usas ColorManager.js)**:
   - Crea una entidad vac√≠a: **Hierarchy** ‚Üí **Add Entity** ‚Üí **Empty**
   - N√≥mbrala `ColorManager`
   - Agrega el script `ColorManager` como componente
   - En el atributo **Player Entity**, arrastra tu Box desde la jerarqu√≠a

---

## üéÆ Paso 2: Configurar la Interfaz Web

### 2.1 Interfaz Inicial (Pre-juego)

Usa el artifact **"Interfaz de Selecci√≥n de Color"** como p√°gina de inicio:

```html
<!-- Estructura recomendada -->
index.html          (Interfaz de selecci√≥n)
    ‚Üì 
game.html           (Tu juego PlayCanvas)
```

### 2.2 Interfaz Durante el Juego

Usa el artifact **"Ejemplo de Integraci√≥n HTML + PlayCanvas"** como base para tu p√°gina del juego:

1. Reemplaza `<canvas id="playcanvas-canvas">` con tu iframe/embed de PlayCanvas
2. El panel flotante aparecer√° autom√°ticamente
3. Los controles funcionar√°n sin configuraci√≥n adicional

---

## ‚öôÔ∏è Paso 3: Configuraci√≥n en PlayCanvas

### 3.1 Configurar Build Settings

1. Ve a **Settings** ‚Üí **Rendering**
2. Aseg√∫rate de que **Transparent Canvas** est√© habilitado si usas la interfaz superpuesta

### 3.2 Configurar Scripts Priority

En **Settings** ‚Üí **Scripts**, ordena los scripts:
```
1. ColorManager (si lo usas)
2. movimiento
3. villano
4. otros scripts...
```

### 3.3 Publicar el Proyecto

1. Ve a **Settings** ‚Üí **Publishing**
2. Haz clic en **Publish**
3. Copia la URL de tu juego publicado

---

## üîß Paso 4: Integraci√≥n Final

### 4.1 M√©todo A: Interfaz Separada + PlayCanvas

```html
<!-- En tu index.html -->
<script>
function startGame() {
    // Guardar color seleccionado
    localStorage.setItem('playerColor', selectedColor);
    localStorage.setItem('playerColorRGB', selectedRGB);
    
    // Redirigir al juego
    window.location.href = 'game.html';
}
</script>
```

```html
<!-- En tu game.html -->
<iframe src="TU_URL_DE_PLAYCANVAS" 
        width="100%" 
        height="100%" 
        frameborder="0">
</iframe>
```

### 4.2 M√©todo B: Todo Integrado

Embebe PlayCanvas directamente en la p√°gina con la interfaz flotante:

```html
<script src="https://code.playcanvas.com/playcanvas-stable.min.js"></script>
<script>
// Configurar PlayCanvas
const canvas = document.getElementById('playcanvas-canvas');
const app = new pc.Application(canvas, {
    mouse: new pc.Mouse(canvas),
    keyboard: new pc.Keyboard(window)
});

// Cargar tu proyecto
app.start('TU_URL_DE_PROYECTO');
</script>
```

---

## üéØ Paso 5: Funcionalidades Disponibles

### 5.1 Controles de Teclado

| Tecla | Funci√≥n |
|-------|---------|
| `1` | Gris Cl√°sico |
| `2` | Rojo Fuego |
| `3` | Azul Oc√©ano |
| `4` | Verde Esmeralda |
| `5` | P√∫rpura M√≠stico |
| `6` | Naranja Solar |
| `7` | Rosa Ne√≥n |
| `8` | Amarillo Dorado |
| `9` | Cian El√©ctrico |
| `0` | Negro Sombra |
| `C` | Siguiente color |
| `R` | Color aleatorio |
| `G` | Volver a gris |
| `H` | Mostrar/ocultar panel |

### 5.2 API JavaScript

```javascript
// Desde cualquier script externo:
if (typeof PlayCanvasColorManager !== 'undefined') {
    PlayCanvasColorManager.setColor('red');
    PlayCanvasColorManager.setColorRGB(1.0, 0.5, 0.0);
    PlayCanvasColorManager.randomColor();
}

// Desde la interfaz web:
GameColorInterface.setColor('blue');
GameColorInterface.showMessage('Color cambiado!');
```

---

## üß™ Paso 6: Pruebas y Depuraci√≥n

### 6.1 Lista de Verificaci√≥n

- [ ] ‚úÖ El Box cambia de color al presionar teclas num√©ricas
- [ ] ‚úÖ Los colores se guardan en localStorage
- [ ] ‚úÖ El color se mantiene tras colisiones
- [ ] ‚úÖ La interfaz web sincroniza con PlayCanvas
- [ ] ‚úÖ Los controles de teclado funcionan
- [ ] ‚úÖ El panel flotante se puede minimizar

### 6.2 Depuraci√≥n Com√∫n

**Problema**: El color no cambia
```javascript
// Verificar en la consola:
console.log("Material:", this.entity.render.meshInstances[0].material);
console.log("Script cargado:", typeof ColorManager);
```

**Problema**: No se guarda en localStorage
```javascript
// Verificar permisos:
try {
    localStorage.setItem('test', 'test');
    console.log('localStorage disponible');
} catch (e) {
    console.log('localStorage bloqueado');
}
```

**Problema**: La interfaz no conecta con PlayCanvas
```javascript
// Verificar conexi√≥n:
console.log('PlayCanvasColorManager:', typeof PlayCanvasColorManager);
console.log('GameColorInterface:', typeof GameColorInterface);
```

---

## üé® Paso 7: Personalizaci√≥n

### 7.1 Agregar Nuevos Colores

En `ColorManager.js` o `movimiento.js`:
```javascript
this.colores.turquesa = { r: 0.0, g: 0.8, b: 0.8, nombre: 'Turquesa Brillante' };
```

En la interfaz HTML:
```html
<div class="color-btn color-turquesa" 
     data-color="turquesa" 
     data-name="Turquesa Brillante"
     onclick="changePlayerColor('turquesa')">
</div>
```

### 7.2 Cambiar Estilos

Modifica los CSS en los artifacts para personalizar:
- Colores del gradiente
- Tama√±os de los botones
- Posici√≥n del panel
- Efectos de animaci√≥n

### 7.3 Agregar Sonidos

```javascript
// En ColorManager.js, funci√≥n aplicarColor:
this.app.fire('sound:play', 'colorChange');
```

---

## üì± Paso 8: Optimizaci√≥n M√≥vil

### 8.1 CSS Responsive

Los artifacts ya incluyen:
```css
@media (max-width: 768px) {
    .color-panel {
        /* Estilos m√≥viles */
    }
}
```

### 8.2 Touch Controls

```javascript
// Los botones ya soportan touch autom√°ticamente
// Para gestos adicionales:
canvas.addEventListener('touchstart', handleTouch);
```

---

## üöÄ ¬°Listo para Jugar!

Una vez completados estos pasos, tendr√°s:

1. **üé® Interfaz elegante** para seleccionar colores
2. **üéÆ Controles en tiempo real** durante el juego  
3. **üíæ Persistencia** de preferencias del jugador
4. **üì± Compatibilidad m√≥vil** completa
5. **üîß Sistema extensible** para futuras mejoras

## üí° Pr√≥ximos Pasos Sugeridos

- Agregar efectos de part√≠culas al cambiar color
- Implementar logros por usar diferentes colores
- Crear modo "color del d√≠a" que cambie autom√°ticamente
- Agregar colores que se desbloqueen con el progreso
- Integrar con un sistema de monetizaci√≥n (colores premium)

¬°Disfruta tu nuevo sistema de colores! üéâ